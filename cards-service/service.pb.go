// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package cards_service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Card
	Pairing
	Empty
*/
package cards_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Card struct {
	Id    string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Cards []*Card `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Card) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Card) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Card) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Pairing struct {
	Parent *Card `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Child  *Card `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (m *Pairing) Reset()                    { *m = Pairing{} }
func (m *Pairing) String() string            { return proto.CompactTextString(m) }
func (*Pairing) ProtoMessage()               {}
func (*Pairing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pairing) GetParent() *Card {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Pairing) GetChild() *Card {
	if m != nil {
		return m.Child
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Card)(nil), "cards_service.Card")
	proto.RegisterType((*Pairing)(nil), "cards_service.Pairing")
	proto.RegisterType((*Empty)(nil), "cards_service.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CardProvider service

type CardProviderClient interface {
	Create(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error)
	Delete(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	Embed(ctx context.Context, in *Pairing, opts ...grpc.CallOption) (*Pairing, error)
	Remove(ctx context.Context, in *Pairing, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error)
}

type cardProviderClient struct {
	cc *grpc.ClientConn
}

func NewCardProviderClient(cc *grpc.ClientConn) CardProviderClient {
	return &cardProviderClient{cc}
}

func (c *cardProviderClient) Create(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := grpc.Invoke(ctx, "/cards_service.CardProvider/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardProviderClient) Delete(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/cards_service.CardProvider/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardProviderClient) Embed(ctx context.Context, in *Pairing, opts ...grpc.CallOption) (*Pairing, error) {
	out := new(Pairing)
	err := grpc.Invoke(ctx, "/cards_service.CardProvider/Embed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardProviderClient) Remove(ctx context.Context, in *Pairing, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/cards_service.CardProvider/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardProviderClient) Get(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := grpc.Invoke(ctx, "/cards_service.CardProvider/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CardProvider service

type CardProviderServer interface {
	Create(context.Context, *Card) (*Card, error)
	Delete(context.Context, *Card) (*Empty, error)
	Embed(context.Context, *Pairing) (*Pairing, error)
	Remove(context.Context, *Pairing) (*Empty, error)
	Get(context.Context, *Card) (*Card, error)
}

func RegisterCardProviderServer(s *grpc.Server, srv CardProviderServer) {
	s.RegisterService(&_CardProvider_serviceDesc, srv)
}

func _CardProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cards_service.CardProvider/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardProviderServer).Create(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cards_service.CardProvider/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardProviderServer).Delete(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardProvider_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardProviderServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cards_service.CardProvider/Embed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardProviderServer).Embed(ctx, req.(*Pairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardProvider_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardProviderServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cards_service.CardProvider/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardProviderServer).Remove(ctx, req.(*Pairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cards_service.CardProvider/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardProviderServer).Get(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cards_service.CardProvider",
	HandlerType: (*CardProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CardProvider_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CardProvider_Delete_Handler,
		},
		{
			MethodName: "Embed",
			Handler:    _CardProvider_Embed_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CardProvider_Remove_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CardProvider_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd3, 0xc4, 0x6c, 0x71, 0xb4, 0x1e, 0xc6, 0x22, 0xa1, 0xa7, 0xb2, 0xa7, 0x8a, 0x10,
	0xb0, 0x2a, 0xe8, 0xb9, 0x8a, 0xd7, 0x92, 0x8b, 0x47, 0xd9, 0x76, 0x07, 0x1d, 0x48, 0x9b, 0x30,
	0x5d, 0x02, 0x3e, 0x8f, 0x2f, 0x2a, 0xbb, 0xcd, 0xc5, 0xd2, 0x3d, 0xf4, 0xb8, 0xff, 0xfe, 0xdf,
	0x7c, 0x3b, 0xb0, 0x30, 0xda, 0x91, 0x74, 0xbc, 0xa6, 0xb2, 0x95, 0xc6, 0x35, 0x38, 0x5a, 0x1b,
	0xb1, 0xbb, 0xcf, 0x3e, 0xd4, 0x1f, 0x70, 0xb6, 0x30, 0x62, 0xf1, 0x0a, 0x52, 0xb6, 0xc5, 0x60,
	0x3a, 0x98, 0x9d, 0x57, 0x29, 0x5b, 0x1c, 0x43, 0xee, 0xd8, 0xd5, 0x54, 0xa4, 0x21, 0xda, 0x1f,
	0xf0, 0x16, 0xf2, 0x80, 0x17, 0xd9, 0x34, 0x9b, 0x5d, 0xcc, 0xaf, 0xcb, 0x7f, 0xc3, 0x4a, 0x3f,
	0xa9, 0xda, 0x37, 0xb4, 0x81, 0xe1, 0xd2, 0xb0, 0xf0, 0xf6, 0x0b, 0xef, 0x40, 0xb5, 0x46, 0x68,
	0xeb, 0xc2, 0xfc, 0x08, 0xd6, 0x57, 0x82, 0xe2, 0x9b, 0x6b, 0x1b, 0xc4, 0x51, 0x85, 0x6f, 0xe8,
	0x21, 0xe4, 0x6f, 0x9b, 0xd6, 0xfd, 0xcc, 0x7f, 0x53, 0xb8, 0xf4, 0x17, 0x4b, 0x69, 0x3a, 0xb6,
	0x24, 0xf8, 0x08, 0x6a, 0x21, 0x64, 0x1c, 0xe1, 0x31, 0x7e, 0x72, 0x2c, 0xd4, 0x09, 0x3e, 0x81,
	0x7a, 0xa5, 0x9a, 0x62, 0xd4, 0xf8, 0x20, 0x0c, 0x6e, 0x9d, 0xe0, 0x8b, 0x7f, 0xc6, 0x8a, 0x2c,
	0xde, 0x1c, 0x14, 0xfa, 0xfd, 0x27, 0x91, 0x5c, 0x27, 0xf8, 0x0c, 0xaa, 0xa2, 0x4d, 0xd3, 0x51,
	0x94, 0x8d, 0x49, 0xef, 0x21, 0x7b, 0x27, 0x77, 0xca, 0x7a, 0x2b, 0x15, 0x3e, 0xc0, 0xc3, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x52, 0x56, 0x2f, 0x11, 0x02, 0x00, 0x00,
}
